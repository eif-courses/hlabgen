package main

import (
	"bufio"
	"flag"
	"fmt"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"github.com/eif-courses/hlabgen/internal/assemble"
	"github.com/eif-courses/hlabgen/internal/input"
	"github.com/eif-courses/hlabgen/internal/metrics"
	mlinternal "github.com/eif-courses/hlabgen/internal/ml"
	"github.com/eif-courses/hlabgen/internal/report"
	"github.com/eif-courses/hlabgen/internal/rules"
	"github.com/eif-courses/hlabgen/internal/validate"
	"github.com/joho/godotenv"
)

func main() {
	// --- 0) Load .env (optional) ---
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  .env not found (using system environment)")
	}

	// --- 1) CLI Flags ---
	in := flag.String("input", "experiments/input/LibraryAPI.json", "path to schema.json")
	mode := flag.String("mode", "hybrid", "rules|ml|hybrid")
	out := flag.String("out", "experiments/out/LibraryAPI", "output directory")
	flag.Parse()

	// --- 2) Load schema ---
	schema, err := input.Load(*in)
	if err != nil {
		log.Fatalf("‚ùå Failed to load schema: %v", err)
	}

	fmt.Printf("\nüöÄ Starting generation for app: %s (mode=%s)\n", schema.AppName, *mode)

	// --- 3) Rule-based scaffold ---
	if _, err := rules.Scaffold(*out, schema.AppName); err != nil {
		log.Fatalf("‚ùå Scaffold failed: %v", err)
	}

	// REMOVED: Don't create fallback tests - let ML generate everything
	// if err := rules.GenerateFallbackTests(*out, schema.AppName); err != nil {
	// 	log.Printf("‚ö†Ô∏è  Failed to create fallback tests: %v\n", err)
	// }

	fmt.Println("‚úÖ Rule-based scaffold created")

	// --- 4) ML Layer (with retry and relaxed mode) ---
	var genMetrics mlinternal.GenerationMetrics
	var files []assemble.File

	if *mode == "ml" || *mode == "hybrid" {
		log.Println("üß† Starting ML-based code generation...")

		// --- first try ---
		genFiles, genMetrics, err := mlinternal.Generate(mlinternal.Schema{
			AppName:    schema.AppName,
			Database:   schema.Database,
			APIPattern: schema.APIPattern,
			Difficulty: schema.Difficulty,
			Entities:   schema.Entities,
			Features:   schema.Features,
			Objectives: schema.Objectives,
		})

		files = convertGenFiles(genFiles)

		if err != nil {
			log.Printf("‚ö†Ô∏è  ML generation failed once: %v", err)
			log.Println("üîÅ Retrying with relaxed mode...")

			genFiles, genMetrics, err = mlinternal.GenerateRelaxed(mlinternal.Schema{
				AppName:    schema.AppName,
				Database:   schema.Database,
				APIPattern: schema.APIPattern,
				Difficulty: schema.Difficulty,
				Entities:   schema.Entities,
				Features:   schema.Features,
				Objectives: schema.Objectives,
			})

			files = convertGenFiles(genFiles)
		}

		if err != nil {
			log.Printf("‚ùå ML generation failed completely ‚Äî falling back to rule-based only: %v", err)
		} else {
			if err := assemble.WriteMany(*out, files, &genMetrics); err != nil {
				log.Fatalf("‚ùå Failed to write generated files: %v", err)
			}

			// üîç NEW: Check if tests were generated
			testCount := 0
			for _, f := range files {
				if strings.HasSuffix(f.Filename, "_test.go") {
					testCount++
				}
			}
			if testCount == 0 {
				log.Println("‚ö†Ô∏è  Warning: No test files were generated by ML")
			} else {
				log.Printf("‚úÖ Generated %d test file(s)", testCount)
			}

			// üîß FIRST: Automatically fix imports based on go.mod
			fixImportsToModule(*out)

			// üîß THEN: Run go mod tidy to clean up dependencies
			fmt.Println("üîß Running go mod tidy...")
			tidyCmd := exec.Command("go", "mod", "tidy")
			tidyCmd.Dir = *out
			tidyCmd.Stdout = os.Stdout
			tidyCmd.Stderr = os.Stderr
			if err := tidyCmd.Run(); err != nil {
				log.Printf("‚ö†Ô∏è  go mod tidy failed: %v", err)
			} else {
				fmt.Println("‚úÖ Dependencies tidied")
			}

			fmt.Printf("‚úÖ ML generation completed (%.2fs)\n", genMetrics.Duration.Seconds())
		}
	} else {
		fmt.Println("‚öôÔ∏è  Skipping ML layer (rules-only mode)")
	}

	// --- 4.5) Clean up any leftover fallback test files ---
	fallbackTestPath := filepath.Join(*out, "internal", "handlers", "book_test.go")
	if _, err := os.Stat(fallbackTestPath); err == nil {
		os.Remove(fallbackTestPath)
		log.Println("üßπ Removed fallback test file")
	}

	// --- 5) Validate & Collect Build Metrics ---
	m, err := validate.Run(*out)
	if err != nil {
		log.Fatalf("‚ùå Validation failed: %v", err)
	}

	fmt.Printf("\nüìä Summary for %s:\n", schema.AppName)
	fmt.Printf("  ‚Ä¢ BuildSuccess = %v\n", m.BuildSuccess)
	fmt.Printf("  ‚Ä¢ LintWarnings = %d\n", m.LintWarnings)
	fmt.Printf("  ‚Ä¢ TestsPass    = %v\n", m.TestsPass)
	fmt.Printf("  ‚Ä¢ Coverage     = %.1f%%\n", m.CoveragePct)
	fmt.Printf("  ‚Ä¢ ML Duration  = %v (repair %d)\n", genMetrics.Duration, genMetrics.RepairAttempts)

	// --- 6) Save metrics ---
	_ = metrics.SaveResult(*out, m)
	_ = metrics.SaveMLMetrics(*out, genMetrics)
	_ = metrics.SaveCombinedMetrics(*out, m, genMetrics)

	// --- 6.5) Save experiment repeatability metadata ---
	metaPath := filepath.Join(*out, "experiment_info.txt")
	meta := fmt.Sprintf(
		"App: %s\nMode: %s\nTimestamp: %s\nOpenAI Model: %s\nBuildSuccess: %v\nTestsPass: %v\nCoverage: %.1f%%\nMLDuration: %v\nRepairAttempts: %d\n",
		schema.AppName,
		*mode,
		time.Now().Format(time.RFC3339),
		getModelName(),
		m.BuildSuccess,
		m.TestsPass,
		m.CoveragePct,
		genMetrics.Duration,
		genMetrics.RepairAttempts,
	)
	if err := os.WriteFile(metaPath, []byte(meta), 0o644); err != nil {
		log.Printf("‚ö†Ô∏è  Failed to write experiment metadata: %v\n", err)
	}

	// --- 7) Aggregate all results across experiments ---
	summaryPath := "experiments/logs/summary.csv"
	_ = os.MkdirAll(filepath.Dir(summaryPath), 0o755)
	if err := metrics.AggregateToCSV("experiments/out", summaryPath); err != nil {
		log.Printf("‚ö†Ô∏è  Failed to aggregate metrics: %v\n", err)
	}
	if err := report.GenerateSummary(); err != nil {
		fmt.Println("‚ö†Ô∏è Failed to generate summary:", err)
	}

	fmt.Println("\n‚úÖ Experiment complete.")
}

// --- Helper: Convert []GenFile ‚Üí []assemble.File ---
func convertGenFiles(in []mlinternal.GenFile) []assemble.File {
	out := make([]assemble.File, len(in))
	for i, f := range in {
		out[i] = assemble.File{Filename: f.Filename, Content: f.Code}
	}
	return out
}

// --- Helper: Detect module name and fix imports automatically ---
func fixImportsToModule(projectDir string) {
	goMod := filepath.Join(projectDir, "go.mod")
	f, err := os.Open(goMod)
	if err != nil {
		log.Printf("‚ö†Ô∏è  No go.mod found in %s (skipping import fix)", projectDir)
		return
	}
	defer f.Close()

	// Detect module name
	scanner := bufio.NewScanner(f)
	moduleName := ""
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if strings.HasPrefix(line, "module ") {
			moduleName = strings.TrimSpace(strings.TrimPrefix(line, "module "))
			break
		}
	}
	if moduleName == "" {
		log.Printf("‚ö†Ô∏è  Could not detect module name in go.mod (skipping import fix)")
		return
	}

	log.Printf("üîß Detected module name: %s ‚Äî fixing imports...", moduleName)

	filepath.WalkDir(projectDir, func(path string, d fs.DirEntry, err error) error {
		if err != nil || d.IsDir() {
			return nil
		}
		if !strings.HasSuffix(path, ".go") {
			return nil
		}

		content, err := os.ReadFile(path)
		if err != nil {
			return nil
		}

		original := string(content)
		newContent := original

		// Fix all possible wrong import patterns
		wrongPatterns := []string{
			`"github.com/eif-courses/hlabgen/internal/`,
			`"github.com/yourusername/` + moduleName + `/internal/`,
			`"github.com/yourusername/` + moduleName + `/`,
			`"yourapp/`,
			`"your_project/`,
		}

		for _, wrongPattern := range wrongPatterns {
			correctPattern := fmt.Sprintf(`"%s/internal/`, moduleName)
			if strings.Contains(wrongPattern, "/internal/") {
				newContent = strings.ReplaceAll(newContent, wrongPattern, correctPattern)
			} else {
				newContent = strings.ReplaceAll(newContent, wrongPattern, fmt.Sprintf(`"%s/`, moduleName))
			}
		}

		// Write back if changed
		if newContent != original {
			err = os.WriteFile(path, []byte(newContent), 0o644)
			if err == nil {
				log.Printf("  ‚úÖ Updated imports in: %s", path)
			}
		}
		return nil
	})

	log.Println("‚úÖ Import paths updated successfully.")
}

// --- Helper: Get model name safely ---
func getModelName() string {
	model := os.Getenv("OPENAI_MODEL")
	if model == "" {
		return "gpt-4o-mini"
	}
	return model
}
