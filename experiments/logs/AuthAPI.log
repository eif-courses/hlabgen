
🚀 Starting generation for app: AuthAPI (mode=hybrid)
2025/10/30 21:39:56 🔀 Starting HYBRID generation (rules + ML + validation)...
2025/10/30 21:39:56 📐 Step 1/3: Creating rule-based scaffold...
go: finding module for package github.com/eif-courses/hlabgen/experiments/out/AuthAPI/internal/models
go: finding module for package github.com/dgrijalva/jwt-go
go: found github.com/dgrijalva/jwt-go in github.com/dgrijalva/jwt-go v3.2.0+incompatible
go: finding module for package github.com/eif-courses/hlabgen/experiments/out/AuthAPI/internal/models
go: AuthAPI/internal/handlers imports
	github.com/eif-courses/hlabgen/experiments/out/AuthAPI/internal/models: module github.com/eif-courses/hlabgen@latest found (v0.0.0-20251026202251-b89543cd5180), but does not contain package github.com/eif-courses/hlabgen/experiments/out/AuthAPI/internal/models
✅ Rule-based scaffold created (structure only)
2025/10/30 21:39:58 🧠 Step 2/3: Using ML to enhance scaffold logic...
🤖 Trying model: gpt-4o
⏱️  Model call took 55.45527322s (model: gpt-4o, attempt: 1)
❌ JSON error: invalid character 'b' after object key:value pair
⚠️ Primary parse failed, retrying with JSON repair prompt...
🤖 Trying model: gpt-4o
⏱️  Model call took 28.94754281s (model: gpt-4o, attempt: 1)
🔁 Repair call took 28.947551867s
❌ JSON error: invalid character 'b' after object key:value pair
--- CLEANED JSON ---
[
  {
    "filename": "internal/models/user.go",
    "code": "package models\n\ntype User struct {\n\tID       int    `json:\"id\"`\n\tUsername string `json:\"username\"`\n\tEmail    string `json:\"email\"`\n\tPassword string `json:\"password\"`\n\tRole     string `json:\"role\"`\n\tFailedAttempts int `json:\"failed_attempts\"`\n\tLocked   bool   `json:\"locked\"`\n}\n"
  },
  {
    "filename": "internal/models/session.go",
    "code": "package models\n\ntype Session struct {\n\tID     int    `json:\"id\"`\n\tUserID int    `json:\"user_id\"`\n\tToken  string `json:\"token\"`\n}\n"
  },
  {
    "filename": "internal/handlers/user.go",
    "code": "package handlers\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"time\"\n\t\"AuthAPI/internal/models\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/dgrijalva/jwt-go\"\n)\n\nvar users []models.User\nvar nextUserID = 1\n\nfunc RegisterUser(w http.ResponseWriter, r *http.Request) {\n\tvar user models.User\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&user); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tif !validatePassword(user.Password) {\n\t\thttp.Error(w, \"Password does not meet complexity requirements\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tuser.ID = nextUserID\n\tnextUserID++\n\tusers = append(users, user)\n\tw.WriteHeader(http.StatusCreated)\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(user)\n}\n\nfunc validatePassword(password string) bool {\n\tvar hasMinLen, hasUpper, hasNumber bool\n\tif len(password) >= 8 {\n\t\thasMinLen = true\n\t}\n\tfor _, char := range password {\n\t\tswitch {\n\t\tcase char >= 'A' && char <= 'Z':\n\t\t\thasUpper = true\n\t\tcase char >= '0' && char <= '9':\n\t\t\thasNumber = true\n\t\t}\n\t}\n\treturn hasMinLen && hasUpper && hasNumber\n}\n\nfunc LoginUser(w http.ResponseWriter, r *http.Request) {\n\tvar credentials struct {\n\t\tEmail    string `json:\"email\"`\n\t\tPassword string `json:\"password\"`\n\t}\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&credentials); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tfor i, user := range users {\n\t\tif user.Email == credentials.Email {\n\t\t\tif user.Locked {\n\t\t\t\thttp.Error(w, \"Account locked\", http.StatusForbidden)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif user.Password == credentials.Password {\n\t\t\t\tusers[i].FailedAttempts = 0\n\t\t\t\ttoken, err := generateJWT(user)\n\t\t\t\tif err != nil {\n\t\t\t\t\thttp.Error(w, \"Error generating token\", http.StatusInternalServerError)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\t\tjson.NewEncoder(w).Encode(map[string]string{\"token\": token})\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tusers[i].FailedAttempts++\n\t\t\t\tif users[i].FailedAttempts >= 5 {\n\t\t\t\t\tusers[i].Locked = true\n\t\t\t\t}\n\t\t\t\thttp.Error(w, \"Invalid credentials\", http.StatusUnauthorized)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\thttp.Error(w, \"User not found\", http.StatusNotFound)\n}\n\nfunc generateJWT(user models.User) (string, error) {\n\tclaims := &jwt.StandardClaims{\n\t\tExpiresAt: time.Now().Add(time.Hour).Unix(),\n\t\tSubject:   strconv.Itoa(user.ID),\n\t}\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\treturn token.SignedString([]byte(\"secret\"))\n}\n\nfunc ProtectedEndpoint(w http.ResponseWriter, r *http.Request) {\n\ttokenString := r.Header.Get(\"Authorization\")\n\tif tokenString == \"\" {\n\t\thttp.Error(w, \"Missing token\", http.StatusUnauthorized)\n\t\treturn\n\t}\n\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\treturn []byte(\"secret\"), nil\n\t})\n\tif err != nil || !token.Valid {\n\t\thttp.Error(w, \"Invalid token\", http.StatusUnauthorized)\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(\"Protected content\"))\n}\n\nfunc AdminEndpoint(w http.ResponseWriter, r *http.Request) {\n\ttokenString := r.Header.Get(\"Authorization\")\n\tif tokenString == \"\" {\n\t\thttp.Error(w, \"Missing token\", http.StatusUnauthorized)\n\t\treturn\n\t}\n\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\treturn []byte(\"secret\"), nil\n\t})\n\tif err != nil || !token.Valid {\n\t\thttp.Error(w, \"Invalid token\", http.StatusUnauthorized)\n\t\treturn\n\t}\n\tclaims, ok := token.Claims.(jwt.MapClaims)\n\tif !ok || claims[\"role\"] != \"admin\" {\n\t\thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(\"Admin content\"))\n}\n"
  },
  {
    "filename": "internal/handlers/session.go",
    "code": "package handlers\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"AuthAPI/internal/models\"\n\t\"github.com/gorilla/mux\"\n)\n\nvar sessions []models.Session\nvar nextSessionID = 1\n\nfunc LogoutUser(w http.ResponseWriter, r *http.Request) {\n\ttoken := r.Header.Get(\"Authorization\")\n\tif token == \"\" {\n\t\thttp.Error(w, \"Missing token\", http.StatusUnauthorized)\n\t\treturn\n\t}\n\tfor i, session := range sessions {\n\t\tif session.Token == token {\n\t\t\tsessions = append(sessions[:i], sessions[i+1:]...)\n\t\t\tw.WriteHeader(http.StatusNoContent)\n\t\t\treturn\n\t\t}\n\t}\n\thttp.Error(w, \"Session not found\", http.StatusNotFound)\n}\n"
  },
  {
    "filename": "internal/handlers/user_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"AuthAPI/internal/handlers\"\n\t\"AuthAPI/internal/models\"\n)\n\nfunc TestRegisterUser(t *testing.T) {\n\tuser := models.User{\n\t\tUsername: \"testuser\",\n\t\tEmail:    \"test@example.com\",\n\t\tPassword: \"Password1\",\n\t}\n\tbody, _ := json.Marshal(user)\n\treq := httptest.NewRequest(\"POST\", \"/register\", bytes.NewBuffer(body))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\tw := httptest.NewRecorder()\n\thandlers.RegisterUser(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestLoginUser(t *testing.T) {\n\tcredentials := map[string]string{\n\t\t\"email\":    \"test@example.com\",\n\t\t\"password\": \"Password1\",\n\t}\n\tbody, _ := json.Marshal(credentials)\n\treq := httptest.NewRequest(\"POST\", \"/login\", bytes.NewBuffer(body))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\tw := httptest.NewRecorder()\n\thandlers.LoginUser(w, req)\n\tif w.Code != http.StatusOK && w.Code != http.StatusUnauthorized {\n\t\tt.Errorf(\"Expected 200 or 401, got %d\", w.Code)\n\t}\n}\n\nfunc TestProtectedEndpoint(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/protected\", nil)\n\treq.Header.Set(\"Authorization\", \"valid-token\")\n\tw := httptest.NewRecorder()\n\thandlers.ProtectedEndpoint(w, req)\n\tif w.Code != http.StatusOK && w.Code != http.StatusUnauthorized {\n\t\tt.Errorf(\"Expected 200 or 401, got %d\", w.Code)\n\t}\n}\n\nfunc TestAdminEndpoint(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/admin\", nil)\n\treq.Header.Set(\"Authorization\", \"admin-token\")\n\tw := httptest.NewRecorder()\n\thandlers.AdminEndpoint(w, req)\n\tif w.Code != http.StatusOK && w.Code != http.StatusForbidden {\n\t\tt.Errorf(\"Expected 200 or 403, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/handlers/session_test.go",
    "code": "package handlers_test\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"AuthAPI/internal/handlers\"\n)\n\nfunc TestLogoutUser(t *testing.T) {\n\treq := httptest.NewRequest(\"POST\", \"/logout\", nil)\n\treq.Header.Set(\"Authorization\", \"valid-token\")\n\tw := httptest.NewRecorder()\n\thandlers.LogoutUser(w, req)\n\tif w.Code != http.StatusNoContent && w.Code != http.StatusNotFound {\n\t\tt.Errorf(\"Expected 204 or 404, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/routes/routes.go",
    "code": "package routes\n\nimport (\n\t\"github.com/gorilla/mux\"\n\t\"AuthAPI/internal/handlers\"\n)\n\nfunc Register(r *mux.Router) {\n\tr.HandleFunc(\"/register\", handlers.RegisterUser).Methods(\"POST\")\n\tr.HandleFunc(\"/login\", handlers.LoginUser).Methods(\"POST\")\n\tr.HandleFunc(\"/protected\", handlers.ProtectedEndpoint).Methods(\"GET\")\n\tr.HandleFunc(\"/admin\", handlers.AdminEndpoint).Methods(\"GET\")\n\tr.HandleFunc(\"/logout\", handlers.LogoutUser).Methods(\"POST\")\n}\n"
  },
  {
    "filename": "cmd/main.go",
    "code": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\t\"AuthAPI/internal/routes\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\troutes.Register(r)\n\tlog.Println(\"Server listening on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", r))\n}\n"
  },
  {
    "filename": "tasks.md",
    "code": "# Lab Tasks - Advanced Features\n\n## Completed Implementation\n✅ All CRUD operations are fully implemented\n✅ Complete test suite for all handlers\n✅ Proper error handling and status codes\n\n## Optional Enhancements (Student Tasks)\n1. Add database persistence using PostgreSQL\n2. Implement authentication and authorization middleware\n3. Add request validation using a validation library\n4. Implement pagination for GetBooks endpoint\n5. Add filtering and sorting capabilities\n6. Create OpenAPI/Swagger documentation\n7. Implement rate limiting middleware\n8. Add logging middleware for all requests\n"
  }
]
--- END ---
🧾 Saved ML metrics → experiments/AuthAPI/gen_metrics.json
2025/10/30 21:41:22 ⚠️  ML enhancement failed: failed to parse repaired output: json parse error: invalid character 'b' after object key:value pair
2025/10/30 21:41:22 🔁 Retrying with relaxed mode...
2025/10/30 21:41:22 🪄 Using relaxed ML generation mode (cleaning JSON output)...
🤖 Trying model: gpt-4o
⏱️  Model call took 36.907103642s (model: gpt-4o, attempt: 1)
✅ Parsed 9 files

📊 Generation Summary:
  • Duration: 36.907282782s
  • Primary Success: true
  • Repair Attempts: 0
  • Final Success: true
  • Error: 
✅ AuthAPI generation completed successfully
🧾 Saved ML metrics → experiments/AuthAPI/gen_metrics.json
2025/10/30 21:41:59 ✅ Normal ML generation succeeded — no relaxed mode needed.
2025/10/30 21:41:59 🔧 Step 3/3: Applying rule-based validation & fixes...
📝 Processing: internal/models/user.go
✅ Written: experiments/out/AuthAPI/internal/models/user.go
📝 Processing: internal/models/session.go
✅ Written: experiments/out/AuthAPI/internal/models/session.go
📝 Processing: internal/handlers/user.go
✅ Written: experiments/out/AuthAPI/internal/handlers/user.go
📝 Processing: internal/handlers/session.go
✅ Written: experiments/out/AuthAPI/internal/handlers/session.go
📝 Processing: internal/handlers/user_test.go
🔧 Fixed test signature for TestRegisterUser
🔧 Fixed test signature for TestLoginUser
✅ Auto-fixed test signatures in internal/handlers/user_test.go
✅ Written: experiments/out/AuthAPI/internal/handlers/user_test.go
📝 Processing: internal/handlers/session_test.go
🔧 Fixed test signature for TestProtectedEndpoint
🔧 Fixed test signature for TestAdminEndpoint
🔧 Fixed test signature for TestLogoutUser
✅ Auto-fixed test signatures in internal/handlers/session_test.go
✅ Written: experiments/out/AuthAPI/internal/handlers/session_test.go
📝 Processing: internal/routes/routes.go
🔧 Fixed Register function parameter
✅ Written: experiments/out/AuthAPI/internal/routes/routes.go
📝 Processing: cmd/main.go
✅ Written: experiments/out/AuthAPI/cmd/main.go
📝 Processing: tasks.md
⚠️  Syntax validation failed for tasks.md: temp.go:1:1: illegal character U+0023 '#'
🔧 Attempting additional fixes...
❌ Could not auto-fix syntax errors in tasks.md
✅ Written: experiments/out/AuthAPI/tasks.md

🔧 Total rule-based fixes applied: 16
🔧 Running rule-based auto-fix on ML-generated files...

🔧 Auto-fixing all files in: experiments/out/AuthAPI

📝 Fixing test function signatures...
  ✅ Fixed test signatures in session_test.go
  ✅ Fixed test signatures in user_test.go

📝 Fixing handler function signatures...

📝 Fixing routes Register function...

✅ Applied 2 auto-fixes
✅ Rule-based fixes applied successfully
🔧 Fixing parseID type mismatches...
🔍 Validating Go syntax...
✅ All generated files have valid Go syntax
2025/10/30 21:41:59 🔧 Detected module name: AuthAPI — fixing imports...
2025/10/30 21:41:59 ✅ No import fixes needed
🔧 Running go mod tidy...
go: finding module for package github.com/dgrijalva/jwt-go
go: found github.com/dgrijalva/jwt-go in github.com/dgrijalva/jwt-go v3.2.0+incompatible
✅ Dependencies tidied
✅ Hybrid generation completed (37.26s) - rules + ML synergy applied
🔧 Verified mux dependency and tidied module
📁 Saved per-package coverage → experiments/out/AuthAPI/coverage.json
🧾 Added summary row (with ML metrics) → experiments/logs/coverage.csv

--- go test summary ---

--- experiments/out/AuthAPI/internal/handlers ---
# AuthAPI/internal/handlers [AuthAPI/internal/handlers.test]
./session.go:14:6: ProtectedEndpoint redeclared in this block
	./protected.go:9:6: other declaration of ProtectedEndpoint
./session.go:32:6: AdminEndpoint redeclared in this block
	./admin.go:10:6: other declaration of AdminEndpoint
./session.go:57:6: LogoutUser redeclared in this block
	./logout.go:9:6: other declaration of LogoutUser
./admin.go:11:14: undefined: r
./admin.go:17:14: undefined: w
./admin.go:23:4: undefined: w
./admin.go:24:20: undefined: w
./admin.go:28:44: undefined: w
./logout.go:10:14: undefined: r
./logout.go:16:14: undefined: w
./logout.go:16:14: too many errors
FAIL	AuthAPI/internal/handlers [build failed]

------------------------
✅ Validation completed in 0.72s

📊 Summary for AuthAPI (mode: hybrid):
  • BuildSuccess = false
  • LintWarnings = 45
  • TestsPass    = false
  • Coverage     = 0.0%
  • Generation Duration = 37.256027896s
  • Repair Attempts = 0
  • Rule Fixes   = 17
🧾 Wrote 10 unique experiments to experiments/logs/summary.csv

🧾 Generating Markdown summary from JSON metrics...
📊 Markdown results saved → experiments/logs/results.md
✅ Summary successfully written to experiments/logs/results.md

✅ Experiment complete..
