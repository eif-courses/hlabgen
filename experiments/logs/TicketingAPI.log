
üöÄ Starting generation for app: TicketingAPI (mode=hybrid)
‚úÖ Rule-based scaffold created
2025/10/20 05:12:36 üß† Starting ML-based code generation...
üåç Using custom endpoint: https://api.openai.com/v1
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 41.438833414s (model: gpt-4o-mini, attempt: 1)
‚ùå JSON error: invalid character 'e' after object key:value pair
‚ö†Ô∏è Primary parse failed, retrying with JSON repair prompt...
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 38.934319549s (model: gpt-4o-mini, attempt: 1)
üîÅ Repair call took 38.934383058s
‚ùå JSON error: invalid character 'e' after object key:value pair
--- CLEANED JSON ---
[
  {
    "filename": "internal/models/ticket.go",
    "code": "package models\n\ntype Ticket struct {\n\tID        int     `json:\"id\"`\n\tEventID   int     `json:\"event_id\"`\n\tAttendeeID int     `json:\"attendee_id\"`\n\tStatus     string  `json:\"status\"`\n}"
  },
  {
    "filename": "internal/models/event.go",
    "code": "package models\n\ntype Event struct {\n\tID       int    `json:\"id\"`\n\tName     string `json:\"name\"`\n\tVenueID  int    `json:\"venue_id\"`\n\tDate     string `json:\"date\"`\n}"
  },
  {
    "filename": "internal/models/attendee.go",
    "code": "package models\n\ntype Attendee struct {\n\tID       int    `json:\"id\"`\n\tName     string `json:\"name\"`\n\tEmail    string `json:\"email\"`\n}"
  },
  {
    "filename": "internal/models/venue.go",
    "code": "package models\n\ntype Venue struct {\n\tID      int    `json:\"id\"`\n\tName    string `json:\"name\"`\n\tAddress string `json:\"address\"`\n}"
  },
  {
    "filename": "internal/handlers/ticket.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t\"net/http\"\n\t\"TicketingAPI/internal/models\"\n)\n\nvar tickets []models.Ticket\n\nfunc CreateTicket(w http.ResponseWriter, r *http.Request) {\n\tvar ticket models.Ticket\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&ticket); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\ttickets = append(tickets, ticket)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(ticket)\n}\n\nfunc GetTickets(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(tickets)\n}\n\nfunc GetTicket(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single ticket\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateTicket(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a ticket\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteTicket(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a ticket\n\tw.WriteHeader(http.StatusNoContent)\n}"
  },
  {
    "filename": "internal/handlers/event.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t\"net/http\"\n\t\"TicketingAPI/internal/models\"\n)\n\nvar events []models.Event\n\nfunc CreateEvent(w http.ResponseWriter, r *http.Request) {\n\tvar event models.Event\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&event); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tevents = append(events, event)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(event)\n}\n\nfunc GetEvents(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(events)\n}\n\nfunc GetEvent(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single event\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateEvent(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating an event\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteEvent(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting an event\n\tw.WriteHeader(http.StatusNoContent)\n}"
  },
  {
    "filename": "internal/handlers/attendee.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t\"net/http\"\n\t\"TicketingAPI/internal/models\"\n)\n\nvar attendees []models.Attendee\n\nfunc CreateAttendee(w http.ResponseWriter, r *http.Request) {\n\tvar attendee models.Attendee\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&attendee); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tattendees = append(attendees, attendee)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(attendee)\n}\n\nfunc GetAttendees(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(attendees)\n}\n\nfunc GetAttendee(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single attendee\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateAttendee(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating an attendee\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteAttendee(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting an attendee\n\tw.WriteHeader(http.StatusNoContent)\n}"
  },
  {
    "filename": "internal/handlers/venue.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t\"net/http\"\n\t\"TicketingAPI/internal/models\"\n)\n\nvar venues []models.Venue\n\nfunc CreateVenue(w http.ResponseWriter, r *http.Request) {\n\tvar venue models.Venue\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&venue); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tvenues = append(venues, venue)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(venue)\n}\n\nfunc GetVenues(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(venues)\n}\n\nfunc GetVenue(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single venue\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateVenue(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a venue\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteVenue(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a venue\n\tw.WriteHeader(http.StatusNoContent)\n}"
  },
  {
    "filename": "internal/handlers/ticket_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"TicketingAPI/internal/handlers\"\n\t\"TicketingAPI/internal/models\"\n)\n\nfunc TestCreateTicket(t *testing.T) {\n\tticket := models.Ticket{\n\t\tEventID:   1,\n\t\tAttendeeID: 1,\n\t\tStatus:     \"confirmed\",\n\t}\n\tbody, _ := json.Marshal(ticket)\n\treq := httptest.NewRequest(\"POST\", \"/tickets\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateTicket(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetTickets(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/tickets\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetTickets(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}"
  },
  {
    "filename": "internal/handlers/event_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"TicketingAPI/internal/handlers\"\n\t\"TicketingAPI/internal/models\"\n)\n\nfunc TestCreateEvent(t *testing.T) {\n\tevent := models.Event{\n\t\tName:    \"Concert\",\n\t\tVenueID: 1,\n\t\tDate:    \"2023-10-01\",\n\t}\n\tbody, _ := json.Marshal(event)\n\treq := httptest.NewRequest(\"POST\", \"/events\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateEvent(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetEvents(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/events\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetEvents(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}"
  },
  {
    "filename": "internal/handlers/attendee_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"TicketingAPI/internal/handlers\"\n\t\"TicketingAPI/internal/models\"\n)\n\nfunc TestCreateAttendee(t *testing.T) {\n\tattendee := models.Attendee{\n\t\tName:  \"John Doe\",\n\t\tEmail: \"john@example.com\",\n\t}\n\tbody, _ := json.Marshal(attendee)\n\treq := httptest.NewRequest(\"POST\", \"/attendees\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateAttendee(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetAttendees(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/attendees\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetAttendees(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}"
  },
  {
    "filename": "internal/handlers/venue_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"TicketingAPI/internal/handlers\"\n\t\"TicketingAPI/internal/models\"\n)\n\nfunc TestCreateVenue(t *testing.T) {\n\tvenue := models.Venue{\n\t\tName:    \"Stadium\",\n\t\tAddress: \"123 Main St\",\n\t}\n\tbody, _ := json.Marshal(venue)\n\treq := httptest.NewRequest(\"POST\", \"/venues\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateVenue(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetVenues(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/venues\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetVenues(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}"
  },
  {
    "filename": "internal/routes/routes.go",
    "code": "package routes\n\nimport (\n\t\"github.com/gorilla/mux\"\n\t\"TicketingAPI/internal/handlers\"\n)\n\nfunc Register(r *mux.Router) {\n\t// Ticket routes\n\tr.HandleFunc(\"/tickets\", handlers.CreateTicket).Methods(\"POST\")\n\tr.HandleFunc(\"/tickets\", handlers.GetTickets).Methods(\"GET\")\n\tr.HandleFunc(\"/tickets/{id}\", handlers.GetTicket).Methods(\"GET\")\n\tr.HandleFunc(\"/tickets/{id}\", handlers.UpdateTicket).Methods(\"PUT\")\n\tr.HandleFunc(\"/tickets/{id}\", handlers.DeleteTicket).Methods(\"DELETE\")\n\t// Event routes\n\tr.HandleFunc(\"/events\", handlers.CreateEvent).Methods(\"POST\")\n\tr.HandleFunc(\"/events\", handlers.GetEvents).Methods(\"GET\")\n\tr.HandleFunc(\"/events/{id}\", handlers.GetEvent).Methods(\"GET\")\n\tr.HandleFunc(\"/events/{id}\", handlers.UpdateEvent).Methods(\"PUT\")\n\tr.HandleFunc(\"/events/{id}\", handlers.DeleteEvent).Methods(\"DELETE\")\n\t// Attendee routes\n\tr.HandleFunc(\"/attendees\", handlers.CreateAttendee).Methods(\"POST\")\n\tr.HandleFunc(\"/attendees\", handlers.GetAttendees).Methods(\"GET\")\n\tr.HandleFunc(\"/attendees/{id}\", handlers.GetAttendee).Methods(\"GET\")\n\tr.HandleFunc(\"/attendees/{id}\", handlers.UpdateAttendee).Methods(\"PUT\")\n\tr.HandleFunc(\"/attendees/{id}\", handlers.DeleteAttendee).Methods(\"DELETE\")\n\t// Venue routes\n\tr.HandleFunc(\"/venues\", handlers.CreateVenue).Methods(\"POST\")\n\tr.HandleFunc(\"/venues\", handlers.GetVenues).Methods(\"GET\")\n\tr.HandleFunc(\"/venues/{id}\", handlers.GetVenue).Methods(\"GET\")\n\tr.HandleFunc(\"/venues/{id}\", handlers.UpdateVenue).Methods(\"PUT\")\n\tr.HandleFunc(\"/venues/{id}\", handlers.DeleteVenue).Methods(\"DELETE\")\n}"
  },
  {
    "filename": "cmd/main.go",
    "code": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\t\"TicketingAPI/internal/routes\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\troutes.Register(r)\n\tlog.Println(\"Server listening on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", r))\n}"
  },
  {
    "filename": "tasks.md",
    "code": "# Lab Tasks\n\n1. Implement the GetTicket handler to return a single ticket by ID\n2. Add validation for required fields in CreateTicket handler\n3. Write additional test cases for UpdateTicket and DeleteTicket handlers\n4. Implement error handling for ticket not found scenarios\n5. Add pagination support for the GetTickets endpoint\n6. Implement similar tasks for Event, Attendee, and Venue handlers."
  }
]
--- END ---
üßæ Saved ML metrics ‚Üí experiments/TicketingAPI/gen_metrics.json
2025/10/20 05:13:56 ‚ö†Ô∏è  ML generation failed once: failed to parse repaired output: json parse error: invalid character 'e' after object key:value pair
2025/10/20 05:13:56 üîÅ Retrying with relaxed mode...
2025/10/20 05:13:56 ü™Ñ Using relaxed ML generation mode (cleaning JSON output)...
üåç Using custom endpoint: https://api.openai.com/v1
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 40.791157434s (model: gpt-4o-mini, attempt: 1)
‚úÖ Parsed 15 files

üìä Generation Summary:
  ‚Ä¢ Duration: 40.791629076s
  ‚Ä¢ Primary Success: true
  ‚Ä¢ Repair Attempts: 0
  ‚Ä¢ Final Success: true
  ‚Ä¢ Error: 
‚úÖ TicketingAPI generation completed successfully
üßæ Saved ML metrics ‚Üí experiments/TicketingAPI/gen_metrics.json
2025/10/20 05:14:37 ‚úÖ Normal ML generation succeeded ‚Äî no relaxed mode needed.
üìù Processing: internal/models/ticket.go
‚úÖ Written: experiments/out/TicketingAPI/internal/models/ticket.go
üìù Processing: internal/models/event.go
‚úÖ Written: experiments/out/TicketingAPI/internal/models/event.go
üìù Processing: internal/models/attendee.go
‚úÖ Written: experiments/out/TicketingAPI/internal/models/attendee.go
üìù Processing: internal/models/venue.go
‚úÖ Written: experiments/out/TicketingAPI/internal/models/venue.go
üìù Processing: internal/handlers/ticket.go
üîß Fixed handler signature for CreateTicket
üîß Fixed handler signature for GetTickets
üîß Fixed handler signature for GetTicket
üîß Fixed handler signature for UpdateTicket
üîß Fixed handler signature for DeleteTicket
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/ticket.go
üìù Processing: internal/handlers/event.go
üîß Fixed handler signature for CreateEvent
üîß Fixed handler signature for GetEvents
üîß Fixed handler signature for GetEvent
üîß Fixed handler signature for UpdateEvent
üîß Fixed handler signature for DeleteEvent
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/event.go
üìù Processing: internal/handlers/attendee.go
üîß Fixed handler signature for CreateAttendee
üîß Fixed handler signature for GetAttendees
üîß Fixed handler signature for GetAttendee
üîß Fixed handler signature for UpdateAttendee
üîß Fixed handler signature for DeleteAttendee
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/attendee.go
üìù Processing: internal/handlers/venue.go
üîß Fixed handler signature for CreateVenue
üîß Fixed handler signature for GetVenues
üîß Fixed handler signature for GetVenue
üîß Fixed handler signature for UpdateVenue
üîß Fixed handler signature for DeleteVenue
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/venue.go
üìù Processing: internal/handlers/ticket_test.go
üîß Fixed test signature for TestCreateTicket
üîß Fixed test signature for TestGetTickets
‚úÖ Auto-fixed test signatures in internal/handlers/ticket_test.go
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/ticket_test.go
üìù Processing: internal/handlers/event_test.go
üîß Fixed test signature for TestCreateEvent
üîß Fixed test signature for TestGetEvents
‚úÖ Auto-fixed test signatures in internal/handlers/event_test.go
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/event_test.go
üìù Processing: internal/handlers/attendee_test.go
üîß Fixed test signature for TestCreateAttendee
üîß Fixed test signature for TestGetAttendees
‚úÖ Auto-fixed test signatures in internal/handlers/attendee_test.go
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/attendee_test.go
üìù Processing: internal/handlers/venue_test.go
üîß Fixed test signature for TestCreateVenue
üîß Fixed test signature for TestGetVenues
‚úÖ Auto-fixed test signatures in internal/handlers/venue_test.go
‚úÖ Written: experiments/out/TicketingAPI/internal/handlers/venue_test.go
üìù Processing: internal/routes/routes.go
üîß Fixed Register function parameter
‚úÖ Written: experiments/out/TicketingAPI/internal/routes/routes.go
üìù Processing: cmd/main.go
‚úÖ Written: experiments/out/TicketingAPI/cmd/main.go
üìù Processing: tasks.md
‚ö†Ô∏è  Syntax validation failed for tasks.md: temp.go:1:1: illegal character U+0023 '#'
üîß Attempting additional fixes...
‚ùå Could not auto-fix syntax errors in tasks.md
‚úÖ Written: experiments/out/TicketingAPI/tasks.md

üîß Total rule-based fixes applied: 32

üîß Running auto-fix on generated files...

üîß Auto-fixing all files in: experiments/out/TicketingAPI

üìù Fixing test function signatures...
  ‚úÖ Fixed test signatures in attendee_test.go
  ‚úÖ Fixed test signatures in event_test.go
  ‚úÖ Fixed test signatures in ticket_test.go
  ‚úÖ Fixed test signatures in venue_test.go

üìù Fixing handler function signatures...

üìù Fixing routes Register function...

üìù Fixing missing commas in struct literals...

üìù Ensuring test file imports...

‚úÖ Applied 4 fixes total!
‚úÖ Auto-fix completed successfully

üîç Validating Go syntax...
‚úÖ All generated files have valid Go syntax
2025/10/20 05:14:37 ‚úÖ Generated 4 test file(s)

üîß Fixing import paths...
2025/10/20 05:14:37 üîß Detected module name: TicketingAPI ‚Äî fixing imports...
2025/10/20 05:14:37 ‚úÖ No import fixes needed
üîß Running go mod tidy...
‚úÖ Dependencies tidied

üîç Final syntax validation after fixes...
‚úÖ All syntax errors resolved
‚úÖ ML generation completed (40.79s)
üìÅ Saved per-package coverage ‚Üí experiments/out/TicketingAPI/coverage.json
üßæ Added summary row (with ML metrics) ‚Üí experiments/logs/coverage.csv

--- go test summary ---

--- experiments/out/TicketingAPI/internal/handlers ---
=== RUN   TestCreateAttendee
--- PASS: TestCreateAttendee (0.00s)
=== RUN   TestGetAttendees
--- PASS: TestGetAttendees (0.00s)
=== RUN   TestCreateEvent
--- PASS: TestCreateEvent (0.00s)
=== RUN   TestGetEvents
--- PASS: TestGetEvents (0.00s)
=== RUN   TestCreateTicket
--- PASS: TestCreateTicket (0.00s)
=== RUN   TestGetTickets
--- PASS: TestGetTickets (0.00s)
=== RUN   TestCreateVenue
--- PASS: TestCreateVenue (0.00s)
=== RUN   TestGetVenues
--- PASS: TestGetVenues (0.00s)
PASS
coverage: 53.3% of statements
ok  	TicketingAPI/internal/handlers	0.005s

------------------------
‚úÖ Validation completed in 1.01s

üìä Summary for TicketingAPI:
  ‚Ä¢ BuildSuccess = true
  ‚Ä¢ LintWarnings = 3
  ‚Ä¢ TestsPass    = true
  ‚Ä¢ Coverage     = 53.3%
  ‚Ä¢ Generation Duration = 40.791629076s
  ‚Ä¢ Repair Attempts = 0
  ‚Ä¢ Rule Fixes   = 32
  ‚Ä¢ Mode: hybrid
üßæ Appended 30 experiments into experiments/logs/summary.csv

üßæ Generating Markdown summary from JSON metrics...
üìä Markdown results saved ‚Üí experiments/logs/results.md
‚úÖ Summary successfully written to experiments/logs/results.md

‚úÖ Experiment complete..
