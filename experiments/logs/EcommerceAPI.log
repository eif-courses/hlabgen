
üöÄ Starting generation for app: EcommerceAPI (mode=hybrid)
‚úÖ Rule-based scaffold created
2025/10/19 21:28:10 üß† Starting ML-based code generation...
üåç Using custom endpoint: https://api.openai.com/v1
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 36.703524673s (model: gpt-4o-mini, attempt: 1)
‚ùå JSON error: invalid character 'e' after object key:value pair
‚ö†Ô∏è Primary parse failed, retrying with JSON repair prompt...
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 35.255071507s (model: gpt-4o-mini, attempt: 1)
üîÅ Repair call took 35.255133425s
‚ùå JSON error: invalid character 'e' after object key:value pair
--- CLEANED JSON ---
[
  {
    "filename": "internal/models/product.go",
    "code": "package models\n\ntype Product struct {\n\tID    int     `json:\"id\"`\n\tName  string  `json:\"name\"`\n\tPrice float64 `json:\"price\"`\n\tStock int     `json:\"stock\"`\n}\n"
  },
  {
    "filename": "internal/models/user.go",
    "code": "package models\n\ntype User struct {\n\tID       int    `json:\"id\"`\n\tUsername string `json:\"username\"`\n\tEmail    string `json:\"email\"`\n\tPassword string `json:\"password\"`\n}\n"
  },
  {
    "filename": "internal/models/cart.go",
    "code": "package models\n\ntype Cart struct {\n\tID       int       `json:\"id\"`\n\tUserID   int       `json:\"user_id\"`\n\tProducts  []Product `json:\"products\"`\n}\n"
  },
  {
    "filename": "internal/models/order.go",
    "code": "package models\n\ntype Order struct {\n\tID       int       `json:\"id\"`\n\tUserID   int       `json:\"user_id\"`\n\tProducts  []Product `json:\"products\"`\n\tTotal    float64   `json:\"total\"`\n}\n"
  },
  {
    "filename": "internal/handlers/product.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t"net/http\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nvar products []models.Product\n\nfunc CreateProduct(w http.ResponseWriter, r *http.Request) {\n\tvar product models.Product\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&product); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tproducts = append(products, product)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(product)\n}\n\nfunc GetProducts(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(products)\n}\n\nfunc GetProduct(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single product\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateProduct(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a product\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteProduct(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a product\n\tw.WriteHeader(http.StatusNoContent)\n}\n"
  },
  {
    "filename": "internal/handlers/user.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t"net/http\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nvar users []models.User\n\nfunc CreateUser(w http.ResponseWriter, r *http.Request) {\n\tvar user models.User\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&user); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tusers = append(users, user)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(user)\n}\n\nfunc GetUsers(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(users)\n}\n\nfunc GetUser(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single user\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateUser(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a user\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteUser(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a user\n\tw.WriteHeader(http.StatusNoContent)\n}\n"
  },
  {
    "filename": "internal/handlers/cart.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t"net/http\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nvar carts []models.Cart\n\nfunc CreateCart(w http.ResponseWriter, r *http.Request) {\n\tvar cart models.Cart\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&cart); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tcarts = append(carts, cart)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(cart)\n}\n\nfunc GetCarts(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(carts)\n}\n\nfunc GetCart(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single cart\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateCart(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a cart\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteCart(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a cart\n\tw.WriteHeader(http.StatusNoContent)\n}\n"
  },
  {
    "filename": "internal/handlers/order.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\"\n\t"net/http\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nvar orders []models.Order\n\nfunc CreateOrder(w http.ResponseWriter, r *http.Request) {\n\tvar order models.Order\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&order); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\torders = append(orders, order)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(order)\n}\n\nfunc GetOrders(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(orders)\n}\n\nfunc GetOrder(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single order\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateOrder(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating an order\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteOrder(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting an order\n\tw.WriteHeader(http.StatusNoContent)\n}\n"
  },
  {
    "filename": "internal/handlers/product_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t"net/http\"\n\t"net/http/httptest\"\n\t"testing\"\n\t\"EcommerceAPI/internal/handlers\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nfunc TestCreateProduct(t *testing.T) {\n\tproduct := models.Product{\n\t\tName:  \"Test Product\",\n\t\tPrice: 10.0,\n\t\tStock: 100,\n\t}\n\tbody, _ := json.Marshal(product)\n\treq := httptest.NewRequest(\"POST\", \"/products\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateProduct(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetProducts(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/products\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetProducts(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/handlers/user_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t"net/http\"\n\t"net/http/httptest\"\n\t"testing\"\n\t\"EcommerceAPI/internal/handlers\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nfunc TestCreateUser(t *testing.T) {\n\tuser := models.User{\n\t\tUsername: \"testuser\",\n\t\tEmail:    \"test@example.com\",\n\t\tPassword: \"password\",\n\t}\n\tbody, _ := json.Marshal(user)\n\treq := httptest.NewRequest(\"POST\", \"/users\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateUser(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetUsers(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/users\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetUsers(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/handlers/cart_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t"net/http\"\n\t"net/http/httptest\"\n\t"testing\"\n\t\"EcommerceAPI/internal/handlers\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nfunc TestCreateCart(t *testing.T) {\n\tcart := models.Cart{\n\t\tUserID: 1,\n\t\tProducts: []models.Product{{ID: 1, Name: \"Test Product\", Price: 10.0, Stock: 100}},\n\t}\n\tbody, _ := json.Marshal(cart)\n\treq := httptest.NewRequest(\"POST\", \"/carts\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateCart(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetCarts(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/carts\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetCarts(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/handlers/order_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t"net/http\"\n\t"net/http/httptest\"\n\t"testing\"\n\t\"EcommerceAPI/internal/handlers\"\n\t\"EcommerceAPI/internal/models\"\n)\n\nfunc TestCreateOrder(t *testing.T) {\n\torder := models.Order{\n\t\tUserID: 1,\n\t\tProducts: []models.Product{{ID: 1, Name: \"Test Product\", Price: 10.0, Stock: 100}},\n\t\tTotal: 10.0,\n\t}\n\tbody, _ := json.Marshal(order)\n\treq := httptest.NewRequest(\"POST\", \"/orders\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateOrder(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetOrders(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/orders\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetOrders(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/routes/routes.go",
    "code": "package routes\n\nimport (\n\t\"github.com/gorilla/mux\"\n\t\"EcommerceAPI/internal/handlers\"\n)\n\nfunc Register(r *mux.Router) {\n\t// Product routes\n\tr.HandleFunc(\"/products\", handlers.CreateProduct).Methods(\"POST\")\n\tr.HandleFunc(\"/products\", handlers.GetProducts).Methods(\"GET\")\n\tr.HandleFunc(\"/products/{id}\", handlers.GetProduct).Methods(\"GET\")\n\tr.HandleFunc(\"/products/{id}\", handlers.UpdateProduct).Methods(\"PUT\")\n\tr.HandleFunc(\"/products/{id}\", handlers.DeleteProduct).Methods(\"DELETE\")\n\t// User routes\n\tr.HandleFunc(\"/users\", handlers.CreateUser).Methods(\"POST\")\n\tr.HandleFunc(\"/users\", handlers.GetUsers).Methods(\"GET\")\n\tr.HandleFunc(\"/users/{id}\", handlers.GetUser).Methods(\"GET\")\n\tr.HandleFunc(\"/users/{id}\", handlers.UpdateUser).Methods(\"PUT\")\n\tr.HandleFunc(\"/users/{id}\", handlers.DeleteUser).Methods(\"DELETE\")\n\t// Cart routes\n\tr.HandleFunc(\"/carts\", handlers.CreateCart).Methods(\"POST\")\n\tr.HandleFunc(\"/carts\", handlers.GetCarts).Methods(\"GET\")\n\tr.HandleFunc(\"/carts/{id}\", handlers.GetCart).Methods(\"GET\")\n\tr.HandleFunc(\"/carts/{id}\", handlers.UpdateCart).Methods(\"PUT\")\n\tr.HandleFunc(\"/carts/{id}\", handlers.DeleteCart).Methods(\"DELETE\")\n\t// Order routes\n\tr.HandleFunc(\"/orders\", handlers.CreateOrder).Methods(\"POST\")\n\tr.HandleFunc(\"/orders\", handlers.GetOrders).Methods(\"GET\")\n\tr.HandleFunc(\"/orders/{id}\", handlers.GetOrder).Methods(\"GET\")\n\tr.HandleFunc(\"/orders/{id}\", handlers.UpdateOrder).Methods(\"PUT\")\n\tr.HandleFunc(\"/orders/{id}\", handlers.DeleteOrder).Methods(\"DELETE\")\n}\n"
  },
  {
    "filename": "cmd/main.go",
    "code": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\t\"EcommerceAPI/internal/routes\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\troutes.Register(r)\n\tlog.Println(\"Server listening on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", r))\n}\n"
  },
  {
    "filename": "tasks.md",
    "code": "# Lab Tasks\n\n1. Implement the GetProduct handler to return a single product by ID\n2. Add validation for required fields in CreateProduct handler\n3. Write additional test cases for UpdateProduct and DeleteProduct handlers\n4. Implement error handling for product not found scenarios\n5. Add pagination support for the GetProducts endpoint\n"
  }
]
--- END ---
üßæ Saved ML metrics ‚Üí experiments/EcommerceAPI/gen_metrics.json
2025/10/19 21:29:22 ‚ö†Ô∏è  ML generation failed once: failed to parse repaired output: json parse error: invalid character 'e' after object key:value pair
2025/10/19 21:29:22 üîÅ Retrying with relaxed mode...
2025/10/19 21:29:22 ü™Ñ Using relaxed ML generation mode (cleaning JSON output)...
üåç Using custom endpoint: https://api.openai.com/v1
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 36.334917463s (model: gpt-4o-mini, attempt: 1)
‚úÖ Parsed 15 files

üìä Generation Summary:
  ‚Ä¢ Duration: 36.33534524s
  ‚Ä¢ Primary Success: true
  ‚Ä¢ Repair Attempts: 0
  ‚Ä¢ Final Success: true
  ‚Ä¢ Error: 
‚úÖ EcommerceAPI generation completed successfully
üßæ Saved ML metrics ‚Üí experiments/EcommerceAPI/gen_metrics.json
2025/10/19 21:29:59 ‚úÖ Normal ML generation succeeded ‚Äî no relaxed mode needed.
üìù Processing: internal/models/product.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/models/product.go
üìù Processing: internal/models/user.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/models/user.go
üìù Processing: internal/models/cart.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/models/cart.go
üìù Processing: internal/models/order.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/models/order.go
üìù Processing: internal/handlers/product.go
üîß Fixed handler signature for CreateProduct
üîß Fixed handler signature for GetProducts
üîß Fixed handler signature for GetProduct
üîß Fixed handler signature for UpdateProduct
üîß Fixed handler signature for DeleteProduct
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/product.go
üìù Processing: internal/handlers/user.go
üîß Fixed handler signature for CreateUser
üîß Fixed handler signature for GetUsers
üîß Fixed handler signature for GetUser
üîß Fixed handler signature for UpdateUser
üîß Fixed handler signature for DeleteUser
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/user.go
üìù Processing: internal/handlers/cart.go
üîß Fixed handler signature for CreateCart
üîß Fixed handler signature for GetCarts
üîß Fixed handler signature for GetCart
üîß Fixed handler signature for UpdateCart
üîß Fixed handler signature for DeleteCart
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/cart.go
üìù Processing: internal/handlers/order.go
üîß Fixed handler signature for CreateOrder
üîß Fixed handler signature for GetOrders
üîß Fixed handler signature for GetOrder
üîß Fixed handler signature for UpdateOrder
üîß Fixed handler signature for DeleteOrder
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/order.go
üìù Processing: internal/handlers/product_test.go
üîß Fixed test signature for TestCreateProduct
üîß Fixed test signature for TestGetProducts
‚úÖ Auto-fixed test signatures in internal/handlers/product_test.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/product_test.go
üìù Processing: internal/handlers/user_test.go
üîß Fixed test signature for TestCreateUser
üîß Fixed test signature for TestGetUsers
‚úÖ Auto-fixed test signatures in internal/handlers/user_test.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/user_test.go
üìù Processing: internal/handlers/cart_test.go
üîß Fixed test signature for TestCreateCart
üîß Fixed test signature for TestGetCarts
‚úÖ Auto-fixed test signatures in internal/handlers/cart_test.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/cart_test.go
üìù Processing: internal/handlers/order_test.go
üîß Fixed test signature for TestCreateOrder
üîß Fixed test signature for TestGetOrders
‚úÖ Auto-fixed test signatures in internal/handlers/order_test.go
‚úÖ Written: experiments/out/EcommerceAPI/internal/handlers/order_test.go
üìù Processing: internal/routes/routes.go
üîß Fixed Register function parameter
‚úÖ Written: experiments/out/EcommerceAPI/internal/routes/routes.go
üìù Processing: cmd/main.go
‚úÖ Written: experiments/out/EcommerceAPI/cmd/main.go
üìù Processing: tasks.md
‚ö†Ô∏è  Syntax validation failed for tasks.md: temp.go:1:1: illegal character U+0023 '#'
üîß Attempting additional fixes...
‚ùå Could not auto-fix syntax errors in tasks.md
‚úÖ Written: experiments/out/EcommerceAPI/tasks.md

üîß Total rule-based fixes applied: 32

üîß Running auto-fix on generated files...

üîß Auto-fixing all files in: experiments/out/EcommerceAPI

üìù Fixing test function signatures...
  ‚úÖ Fixed test signatures in cart_test.go
  ‚úÖ Fixed test signatures in order_test.go
  ‚úÖ Fixed test signatures in product_test.go
  ‚úÖ Fixed test signatures in user_test.go

üìù Fixing handler function signatures...

üìù Fixing routes Register function...

üìù Fixing missing commas in struct literals...

üìù Ensuring test file imports...

‚úÖ Applied 4 fixes total!
‚úÖ Auto-fix completed successfully

üîç Validating Go syntax...
‚úÖ All generated files have valid Go syntax
2025/10/19 21:29:59 ‚úÖ Generated 4 test file(s)

üîß Fixing import paths...
2025/10/19 21:29:59 üîß Detected module name: EcommerceAPI ‚Äî fixing imports...
2025/10/19 21:29:59 ‚úÖ No import fixes needed
üîß Running go mod tidy...
‚úÖ Dependencies tidied

üîç Final syntax validation after fixes...
‚úÖ All syntax errors resolved
‚úÖ ML generation completed (36.34s)
üìÅ Saved per-package coverage ‚Üí experiments/out/EcommerceAPI/coverage.json
üßæ Added summary row (with ML metrics) ‚Üí experiments/logs/coverage.csv

--- go test summary ---

--- experiments/out/EcommerceAPI/internal/handlers ---
=== RUN   TestCreateCart
--- PASS: TestCreateCart (0.00s)
=== RUN   TestGetCarts
--- PASS: TestGetCarts (0.00s)
=== RUN   TestCreateOrder
--- PASS: TestCreateOrder (0.00s)
=== RUN   TestGetOrders
--- PASS: TestGetOrders (0.00s)
=== RUN   TestCreateProduct
--- PASS: TestCreateProduct (0.00s)
=== RUN   TestGetProducts
--- PASS: TestGetProducts (0.00s)
=== RUN   TestCreateUser
--- PASS: TestCreateUser (0.00s)
=== RUN   TestGetUsers
--- PASS: TestGetUsers (0.00s)
PASS
coverage: 53.3% of statements
ok  	EcommerceAPI/internal/handlers	0.003s

------------------------
‚úÖ Validation completed in 0.95s

üìä Summary for EcommerceAPI:
  ‚Ä¢ BuildSuccess = true
  ‚Ä¢ LintWarnings = 3
  ‚Ä¢ TestsPass    = true
  ‚Ä¢ Coverage     = 53.3%
  ‚Ä¢ Generation Duration = 36.33534524s
  ‚Ä¢ Repair Attempts = 0
  ‚Ä¢ Rule Fixes   = 32
  ‚Ä¢ Mode: hybrid
üßæ Appended 30 experiments into experiments/logs/summary.csv

üßæ Generating Markdown summary from JSON metrics...
üìä Markdown results saved ‚Üí experiments/logs/results.md
‚úÖ Summary successfully written to experiments/logs/results.md

‚úÖ Experiment complete..
