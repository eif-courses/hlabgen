
üöÄ Starting generation for app: HealthAPI (mode=hybrid)
‚úÖ Rule-based scaffold created
2025/10/20 04:55:06 üß† Starting ML-based code generation...
üåç Using custom endpoint: https://api.openai.com/v1
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 30.928427663s (model: gpt-4o-mini, attempt: 1)
‚ùå JSON error: invalid character 'e' after object key:value pair
‚ö†Ô∏è Primary parse failed, retrying with JSON repair prompt...
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 34.713181212s (model: gpt-4o-mini, attempt: 1)
üîÅ Repair call took 34.713254045s
‚ùå JSON error: invalid character 'e' after object key:value pair
--- CLEANED JSON ---
[
  {
    "filename": "internal/models/patient.go",
    "code": "package models\n\ntype Patient struct {\n\tID       int    `json:\"id\"`\n\tName     string `json:\"name\"`\n\tAge      int    `json:\"age\"`\n\tGender   string `json:\"gender\"`\n\tEmail    string `json:\"email\"`\n}\n"
  },
  {
    "filename": "internal/models/doctor.go",
    "code": "package models\n\ntype Doctor struct {\n\tID       int    `json:\"id\"`\n\tName     string `json:\"name\"`\n\tSpecialty string `json:\"specialty\"`\n\tEmail    string `json:\"email\"`\n}\n"
  },
  {
    "filename": "internal/models/record.go",
    "code": "package models\n\ntype Record struct {\n\tID        int     `json:\"id\"`\n\tPatientID int     `json:\"patient_id\"`\n\tDoctorID  int     `json:\"doctor_id\"`\n\tNotes     string  `json:\"notes\"`\n\tDate      string  `json:\"date\"`\n}\n"
  },
  {
    "filename": "internal/handlers/patient.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\n\t"net/http\"\n\t\"HealthAPI/internal/models\"\n)\n\nvar patients []models.Patient\n\nfunc CreatePatient(w http.ResponseWriter, r *http.Request) {\n\tvar patient models.Patient\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&patient); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tpatients = append(patients, patient)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(patient)\n}\n\nfunc GetPatients(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(patients)\n}\n\nfunc GetPatient(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single patient\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdatePatient(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a patient\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeletePatient(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a patient\n\tw.WriteHeader(http.StatusNoContent)\n}\n"
  },
  {
    "filename": "internal/handlers/doctor.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\n\t"net/http\"\n\t\"HealthAPI/internal/models\"\n)\n\nvar doctors []models.Doctor\n\nfunc CreateDoctor(w http.ResponseWriter, r *http.Request) {\n\tvar doctor models.Doctor\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&doctor); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tdoctors = append(doctors, doctor)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(doctor)\n}\n\nfunc GetDoctors(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(doctors)\n}\n\nfunc GetDoctor(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single doctor\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateDoctor(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a doctor\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteDoctor(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a doctor\n\tw.WriteHeader(http.StatusNoContent)\n}\n"
  },
  {
    "filename": "internal/handlers/record.go",
    "code": "package handlers\n\nimport (\n\t"encoding/json\n\t"net/http\"\n\t\"HealthAPI/internal/models\"\n)\n\nvar records []models.Record\n\nfunc CreateRecord(w http.ResponseWriter, r *http.Request) {\n\tvar record models.Record\n\tif r.Body == nil {\n\t\thttp.Error(w, \"missing body\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif err := json.NewDecoder(r.Body).Decode(&record); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\trecords = append(records, record)\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(record)\n}\n\nfunc GetRecords(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(records)\n}\n\nfunc GetRecord(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for getting a single record\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc UpdateRecord(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for updating a record\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteRecord(w http.ResponseWriter, r *http.Request) {\n\t// Implementation for deleting a record\n\tw.WriteHeader(http.StatusNoContent)\n}\n"
  },
  {
    "filename": "internal/handlers/patient_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t"net/http\"\n\t"net/http/httptest\"\n\t"testing\"\n\t\"HealthAPI/internal/handlers\"\n\t\"HealthAPI/internal/models\"\n)\n\nfunc TestCreatePatient(t *testing.T) {\n\tpatient := models.Patient{\n\t\tName:  \"John Doe\",\n\t\tAge:   30,\n\t\tGender: \"Male\",\n\t\tEmail:  \"john@example.com\",\n\t}\n\tbody, _ := json.Marshal(patient)\n\treq := httptest.NewRequest(\"POST\", \"/patients\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreatePatient(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetPatients(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/patients\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetPatients(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/handlers/doctor_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t"net/http\"\n\t"net/http/httptest\"\n\t"testing\"\n\t\"HealthAPI/internal/handlers\"\n\t\"HealthAPI/internal/models\"\n)\n\nfunc TestCreateDoctor(t *testing.T) {\n\tdoctor := models.Doctor{\n\t\tName:     \"Dr. Smith\",\n\t\tSpecialty: \"Cardiology\",\n\t\tEmail:    \"drsmith@example.com\",\n\t}\n\tbody, _ := json.Marshal(doctor)\n\treq := httptest.NewRequest(\"POST\", \"/doctors\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateDoctor(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetDoctors(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/doctors\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetDoctors(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/handlers/record_test.go",
    "code": "package handlers_test\n\nimport (\n\t"bytes\"\n\t"encoding/json\"\n\t"net/http\"\n\t"net/http/httptest\"\n\t"testing\"\n\t\"HealthAPI/internal/handlers\"\n\t\"HealthAPI/internal/models\"\n)\n\nfunc TestCreateRecord(t *testing.T) {\n\trecord := models.Record{\n\t\tPatientID: 1,\n\t\tDoctorID:  1,\n\t\tNotes:     \"Routine checkup\",\n\t\tDate:      \"2023-10-01\",\n\t}\n\tbody, _ := json.Marshal(record)\n\treq := httptest.NewRequest(\"POST\", \"/records\", bytes.NewBuffer(body))\n\tw := httptest.NewRecorder()\n\thandlers.CreateRecord(w, req)\n\tif w.Code != http.StatusCreated {\n\t\tt.Errorf(\"Expected 201, got %d\", w.Code)\n\t}\n}\n\nfunc TestGetRecords(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"/records\", nil)\n\tw := httptest.NewRecorder()\n\thandlers.GetRecords(w, req)\n\tif w.Code != http.StatusOK {\n\t\tt.Errorf(\"Expected 200, got %d\", w.Code)\n\t}\n}\n"
  },
  {
    "filename": "internal/routes/routes.go",
    "code": "package routes\n\nimport (\n\t\"github.com/gorilla/mux\"\n\t\"HealthAPI/internal/handlers\"\n)\n\nfunc Register(r *mux.Router) {\n\t// Patient routes\n\tr.HandleFunc(\"/patients\", handlers.CreatePatient).Methods(\"POST\")\n\tr.HandleFunc(\"/patients\", handlers.GetPatients).Methods(\"GET\")\n\tr.HandleFunc(\"/patients/{id}\", handlers.GetPatient).Methods(\"GET\")\n\tr.HandleFunc(\"/patients/{id}\", handlers.UpdatePatient).Methods(\"PUT\")\n\tr.HandleFunc(\"/patients/{id}\", handlers.DeletePatient).Methods(\"DELETE\")\n\n\t// Doctor routes\n\tr.HandleFunc(\"/doctors\", handlers.CreateDoctor).Methods(\"POST\")\n\tr.HandleFunc(\"/doctors\", handlers.GetDoctors).Methods(\"GET\")\n\tr.HandleFunc(\"/doctors/{id}\", handlers.GetDoctor).Methods(\"GET\")\n\tr.HandleFunc(\"/doctors/{id}\", handlers.UpdateDoctor).Methods(\"PUT\")\n\tr.HandleFunc(\"/doctors/{id}\", handlers.DeleteDoctor).Methods(\"DELETE\")\n\n\t// Record routes\n\tr.HandleFunc(\"/records\", handlers.CreateRecord).Methods(\"POST\")\n\tr.HandleFunc(\"/records\", handlers.GetRecords).Methods(\"GET\")\n\tr.HandleFunc(\"/records/{id}\", handlers.GetRecord).Methods(\"GET\")\n\tr.HandleFunc(\"/records/{id}\", handlers.UpdateRecord).Methods(\"PUT\")\n\tr.HandleFunc(\"/records/{id}\", handlers.DeleteRecord).Methods(\"DELETE\")\n}\n"
  },
  {
    "filename": "cmd/main.go",
    "code": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\t\"HealthAPI/internal/routes\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\troutes.Register(r)\n\tlog.Println(\"Server listening on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", r))\n}\n"
  },
  {
    "filename": "tasks.md",
    "code": "# Lab Tasks\n\n1. Implement the GetPatient handler to return a single patient by ID\n2. Add validation for required fields in CreatePatient handler\n3. Write additional test cases for UpdatePatient and DeletePatient handlers\n4. Implement error handling for patient not found scenarios\n5. Add pagination support for the GetPatients endpoint\n6. Implement similar tasks for Doctor and Record entities\n"
  }
]
--- END ---
üßæ Saved ML metrics ‚Üí experiments/HealthAPI/gen_metrics.json
2025/10/20 04:56:11 ‚ö†Ô∏è  ML generation failed once: failed to parse repaired output: json parse error: invalid character 'e' after object key:value pair
2025/10/20 04:56:11 üîÅ Retrying with relaxed mode...
2025/10/20 04:56:11 ü™Ñ Using relaxed ML generation mode (cleaning JSON output)...
üåç Using custom endpoint: https://api.openai.com/v1
ü§ñ Trying model: gpt-4o-mini
‚è±Ô∏è  Model call took 40.036939863s (model: gpt-4o-mini, attempt: 1)
‚úÖ Parsed 12 files

üìä Generation Summary:
  ‚Ä¢ Duration: 40.037288469s
  ‚Ä¢ Primary Success: true
  ‚Ä¢ Repair Attempts: 0
  ‚Ä¢ Final Success: true
  ‚Ä¢ Error: 
‚úÖ HealthAPI generation completed successfully
üßæ Saved ML metrics ‚Üí experiments/HealthAPI/gen_metrics.json
2025/10/20 04:56:51 ‚úÖ Normal ML generation succeeded ‚Äî no relaxed mode needed.
üìù Processing: internal/models/patient.go
‚úÖ Written: experiments/out/HealthAPI/internal/models/patient.go
üìù Processing: internal/models/doctor.go
‚úÖ Written: experiments/out/HealthAPI/internal/models/doctor.go
üìù Processing: internal/models/record.go
‚úÖ Written: experiments/out/HealthAPI/internal/models/record.go
üìù Processing: internal/handlers/patient.go
üîß Fixed handler signature for CreatePatient
üîß Fixed handler signature for GetPatients
üîß Fixed handler signature for GetPatient
üîß Fixed handler signature for UpdatePatient
üîß Fixed handler signature for DeletePatient
‚úÖ Written: experiments/out/HealthAPI/internal/handlers/patient.go
üìù Processing: internal/handlers/doctor.go
üîß Fixed handler signature for CreateDoctor
üîß Fixed handler signature for GetDoctors
üîß Fixed handler signature for GetDoctor
üîß Fixed handler signature for UpdateDoctor
üîß Fixed handler signature for DeleteDoctor
‚úÖ Written: experiments/out/HealthAPI/internal/handlers/doctor.go
üìù Processing: internal/handlers/record.go
üîß Fixed handler signature for CreateRecord
üîß Fixed handler signature for GetRecords
üîß Fixed handler signature for GetRecord
üîß Fixed handler signature for UpdateRecord
üîß Fixed handler signature for DeleteRecord
‚úÖ Written: experiments/out/HealthAPI/internal/handlers/record.go
üìù Processing: internal/handlers/patient_test.go
üîß Fixed test signature for TestCreatePatient
üîß Fixed test signature for TestGetPatients
‚úÖ Auto-fixed test signatures in internal/handlers/patient_test.go
‚úÖ Written: experiments/out/HealthAPI/internal/handlers/patient_test.go
üìù Processing: internal/handlers/doctor_test.go
üîß Fixed test signature for TestCreateDoctor
üîß Fixed test signature for TestGetDoctors
‚úÖ Auto-fixed test signatures in internal/handlers/doctor_test.go
‚úÖ Written: experiments/out/HealthAPI/internal/handlers/doctor_test.go
üìù Processing: internal/handlers/record_test.go
üîß Fixed test signature for TestCreateRecord
üîß Fixed test signature for TestGetRecords
‚úÖ Auto-fixed test signatures in internal/handlers/record_test.go
‚úÖ Written: experiments/out/HealthAPI/internal/handlers/record_test.go
üìù Processing: internal/routes/routes.go
üîß Fixed Register function parameter
‚úÖ Written: experiments/out/HealthAPI/internal/routes/routes.go
üìù Processing: cmd/main.go
‚úÖ Written: experiments/out/HealthAPI/cmd/main.go
üìù Processing: tasks.md
‚ö†Ô∏è  Syntax validation failed for tasks.md: temp.go:1:1: illegal character U+0023 '#'
üîß Attempting additional fixes...
‚ùå Could not auto-fix syntax errors in tasks.md
‚úÖ Written: experiments/out/HealthAPI/tasks.md

üîß Total rule-based fixes applied: 25

üîß Running auto-fix on generated files...

üîß Auto-fixing all files in: experiments/out/HealthAPI

üìù Fixing test function signatures...
  ‚úÖ Fixed test signatures in doctor_test.go
  ‚úÖ Fixed test signatures in patient_test.go
  ‚úÖ Fixed test signatures in record_test.go

üìù Fixing handler function signatures...

üìù Fixing routes Register function...

üìù Fixing missing commas in struct literals...

üìù Ensuring test file imports...

‚úÖ Applied 3 fixes total!
‚úÖ Auto-fix completed successfully

üîç Validating Go syntax...
‚úÖ All generated files have valid Go syntax
2025/10/20 04:56:51 ‚úÖ Generated 3 test file(s)

üîß Fixing import paths...
2025/10/20 04:56:51 üîß Detected module name: HealthAPI ‚Äî fixing imports...
2025/10/20 04:56:51 ‚úÖ No import fixes needed
üîß Running go mod tidy...
‚úÖ Dependencies tidied

üîç Final syntax validation after fixes...
‚úÖ All syntax errors resolved
‚úÖ ML generation completed (40.04s)
üìÅ Saved per-package coverage ‚Üí experiments/out/HealthAPI/coverage.json
üßæ Added summary row (with ML metrics) ‚Üí experiments/logs/coverage.csv

--- go test summary ---

--- experiments/out/HealthAPI/internal/handlers ---
=== RUN   TestCreateDoctor
--- PASS: TestCreateDoctor (0.00s)
=== RUN   TestGetDoctors
--- PASS: TestGetDoctors (0.00s)
=== RUN   TestCreatePatient
--- PASS: TestCreatePatient (0.00s)
=== RUN   TestGetPatients
--- PASS: TestGetPatients (0.00s)
=== RUN   TestCreateRecord
--- PASS: TestCreateRecord (0.00s)
=== RUN   TestGetRecords
--- PASS: TestGetRecords (0.00s)
PASS
coverage: 53.3% of statements
ok  	HealthAPI/internal/handlers	0.003s

------------------------
‚úÖ Validation completed in 0.99s

üìä Summary for HealthAPI:
  ‚Ä¢ BuildSuccess = true
  ‚Ä¢ LintWarnings = 3
  ‚Ä¢ TestsPass    = true
  ‚Ä¢ Coverage     = 53.3%
  ‚Ä¢ Generation Duration = 40.037288469s
  ‚Ä¢ Repair Attempts = 0
  ‚Ä¢ Rule Fixes   = 25
  ‚Ä¢ Mode: hybrid
üßæ Appended 30 experiments into experiments/logs/summary.csv

üßæ Generating Markdown summary from JSON metrics...
üìä Markdown results saved ‚Üí experiments/logs/results.md
‚úÖ Summary successfully written to experiments/logs/results.md

‚úÖ Experiment complete..
